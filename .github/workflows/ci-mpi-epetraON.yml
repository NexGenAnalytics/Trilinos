name: MPI-EpetraON

# Trigger the workflow on push or pull request
on:
  pull_request:
    branches:
      - NGA-FY23-develop
  workflow_dispatch:

# Cancel any existing jobs
concurrency:
  group: ${{ github.event.repository.name }}-${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  build:
    runs-on: self-hosted
    strategy:
      fail-fast: true
    steps:
      - uses: actions/checkout@v3
      - name: CI Variables
        id: vars
        run: echo "DOCKER_TAG=$(echo ${{ github.ref }} | cut -d'/' -f3- | sed 's/[^a-z0-9_-]/__/gi')" >> $GITHUB_ENV
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Inspect Builder
        run: |
          echo "Name:      ${{ steps.buildx.outputs.name }}"
          echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
          echo "Status:    ${{ steps.buildx.outputs.status }}"
          echo "Flags:     ${{ steps.buildx.outputs.flags }}"
          echo "Platforms: ${{ steps.buildx.outputs.platforms }}"
          echo "DOCKER_TAG: ${{ env.DOCKER_TAG }}"
          echo "SCOPE_NAME  ${{ env.SCOPE_NAME }}"
      - name: Build and Run Docker Image
        run: |
          docker build -t ${{ env.DOCKER_TAG }} -f ./nga-ci/mpi-epetraON.dockerfile .
          docker run -v /tmp/artifacts:/tmp/artifacts ${{ env.DOCKER_TAG }} /opt/src/Trilinos/nga-ci/test-mpi.sh
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        if: success() || failure()
        with:
          name: Artifacts
          path: /tmp/artifacts/*
          if-no-files-found: ignore
      - name: Report Test results
        uses: phoenix-actions/test-reporting@v12
        if: success() || failure()
        with:
          name: Tests report (MPI-EpetraON)
          path: /tmp/artifacts/junit-tests-report.xml
          reporter: java-junit
          output-to: step-summary
          fail-on-error: 'true'
          list-tests: 'failed'
      - name: Clear Docker cache
        run: |
          docker system prune -af
