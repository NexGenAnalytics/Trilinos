// $Id$
// $Source$

//@HEADER
// ************************************************************************
//
//            LOCA: Library of Continuation Algorithms Package
//                 Copyright (2005) Sandia Corporation
//
// Under terms of Contract DE-AC04-94AL85000, there is a non-exclusive
// license for use of this work by or on behalf of the U.S. Government.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
// 1. Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the Corporation nor the names of the
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Questions? Contact Roger Pawlowski (rppawlo@sandia.gov) or
// Eric Phipps (etphipp@sandia.gov), Sandia National Laboratories.
// ************************************************************************
//  CVS Information
//  $Source$
//  $Author$
//  $Date$
//  $Revision$
// ************************************************************************
//@HEADER

// Finite Element Problem Class
/* Provides function (F) and Jacobian evaluations for the following equation
 * via a 1D linear finite element discretization with Epetra objects.
 *
 * d2u
 * --- + lambda * u - alpha * u**2 + beta * u**3 = 0
 * dx2
 *
 * subject to the boundar conditions u(-1) = u(1) = beta.
 */

#ifndef _PITCHFORK_FINITEELEMENTPROBLEM_H
#define _PITCHFORK_FINITEELEMENTPROBLEM_H

#include "FiniteElementProblem.hpp" // base class

// Forward Declarations
namespace Teuchos { template <typename Ordinal> class Comm; }

// Finite Element Problem Class
template <typename Scalar>
class Pitchfork_FiniteElementProblem : public FiniteElementProblem<Scalar> {

public:

  // Types
  using scalar_type     = typename FiniteElementProblem<Scalar>::scalar_type;
  using vector_type     = typename FiniteElementProblem<Scalar>::vector_type;
  using row_matrix_type = typename FiniteElementProblem<Scalar>::row_matrix_type;
  using crs_matrix_type = typename FiniteElementProblem<Scalar>::crs_matrix_type;
  using import_type     = typename FiniteElementProblem<Scalar>::import_type;
  using csr_graph_type  = typename FiniteElementProblem<Scalar>::csr_graph_type;
  using map_type        = typename FiniteElementProblem<Scalar>::map_type;

  // Constructor
  Pitchfork_FiniteElementProblem(int numGlobalElements, Teuchos::RCP<const Teuchos::Comm<int>>& comm);

  // Destructor
  virtual ~Pitchfork_FiniteElementProblem();

  // Evaluates the function (F) and/or the Jacobian using the solution
  // values in solnVector.
  virtual bool evaluate(FillType f, const vector_type *solnVector,
            vector_type *rhsVector, row_matrix_type *matrix,
            scalar_type jac_coeff = 1.0,
            scalar_type mass_coeff = 0.0);

  // Return a reference to the Tpetra_Vector with the initial guess
  // that is generated by the FiniteElementProblem class.
  virtual vector_type& getSolution();

  // Return a reference to the Tpetra_Vector with the Jacobian
  // that is generated by the FiniteElementProblem class.
  virtual crs_matrix_type & getJacobian();

  // Set a bifurcation parameter in the application physics
  virtual bool setParameter(std::string label, scalar_type value);

private:

  // inserts the global column indices into the Graph
  csr_graph_type& generateGraph(csr_graph_type& AA);

  // Computes the source term
  scalar_type source_term(scalar_type x);

  // Computes the derivative of the source term
  scalar_type source_deriv(scalar_type x);

  // Private to prohibit copying
  Pitchfork_FiniteElementProblem(const Pitchfork_FiniteElementProblem&);

  // Private to prohibit copying
  Pitchfork_FiniteElementProblem& operator=(const Pitchfork_FiniteElementProblem&);

private:

  FillType flag;
  map_type *standardMap;
  map_type *overlapMap;
  import_type *importer;
  vector_type *initialSolution;
  vector_type *rhs;
  csr_graph_type *AA;
  crs_matrix_type *A;
  Teuchos::RCP<const Teuchos::Comm<int>> comm;

  int rank;               // Process number
  int numProcs;            // Total number of processes
  int numLocalElements;      // Number of elements owned by this process
  int numGlobalElements;  // Total Number of elements

 public:

  scalar_type lambda;          // factor used on nonlinear term
  scalar_type alpha;           // factor used on nonlinear term
  scalar_type beta;            // factor used on nonlinear term
};
#endif




